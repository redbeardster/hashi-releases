Введение в создание релизов с помощью Erlybank
Автор: Митчелл Хашимото, дата публикации : 17 сентября, 2008


Это шестая часть введения в OTP. Я рекомендую Вам начать с первой части, повествующей о gen_server и являющейся основополагающей для нашей банковской системы, если Вы этого еще не сделали.  Если учитесь быстро, то скачайте исходники Erlybank сразу. 

Данная статья даст начальные знания об управлении релизами Erlang-приложений. Оно не ограничено OTP-приложениями и может быть применено ко всем приложениям, написанным на Erlang. 

Управление релизами - консолидация самого приложения и всех его зависимостей в пакет, который может быть легко запущен или остановлен как единое целое. Релизы могут быть "установлены" в систему времени выполнения Erlang (здесь и далее - ERTS). также релизы могут быть обновлены в реальном времени, причем так, что при создании новой версии приложения она может быть бесшовно установлена в систему без ее останова (NB: Обновление системы в реальном времени рассматривается в _следующей_ статье!).

После построения Erlybank как приложения превращение его в релизо осуществляется просто. Но сперва необходимо привести в порядок структуру каталогов. 

*Структура каталогов релиза*

В общем, все релизы приложений представляют собой деревья каталогов идентичной структуры. Она не является обязательной, но представляет собой хоршую практику, улучшающую поддержку кода: 

Application-Vsn/ebin
               /include
               /priv
               /src

Каталог src содержит все .erl-файлы, исходные коды приложения. Каталог ebin - скомпилированные из исходников .beam-файлы и файлов спецификации приложения. В каталоге include находятся .hrl-файлы, которые могут быть подключены приложением. Каталог priv хранит в себе исполняемые файлы, используемые приложением, такие как приложения-порты и и Erlang-драйверы. 

Все эти каталоги содержатся в каталоге-родителе, имеющем вид "Application-Vsn", где Фpplication - название приложения, а "Vsn"- его версия. 

Реорганизация структуры Erlybank для соответствия данной модели проста и я сделаю это перед тем, как продолжить. Просто переместите все .erl-файлы в каталог src, а файл erlybank.app - в каталог ebin/.

Другой важной вещью, которую необходимо помнить, является то, что при ручной сборке из исходников результирующие .beam-файлы помещаются в тот же каталог, где находятся и .erl-файлы. Для того, чтобы .beam-файлы помещались при компиляции автоматически в каталог ebin/, процесс сборки должен осуществляться с помощью следующей команды, которую можно поместить в Makefile или куда-либо еще на ваш выбор: 

erlc -o ../ebin eb_app.erl eb_sup.erl eb_event_manager.erl eb_atm.erl eb_withdrawal_handler.erl eb_server.erl

Вышеприведенная команда должна быть дана из каталога src/, ее результатом будут помещенные в каталог ../ebin .beam-файлы. 


*Файл спецификации релиза*

Для того, чтобы создать релиз, требуется одна вещь - файл конфигурации релиза. Он испотщзуется утилитой systools для выяснения, как создавать пакет из приложения. Данный формат файла хорошо документирован в разделе релизов документации, который я рекомендую пролистать прямо сейчас. Созданная для Erlybank спецификация релиза приведена ниже: 

release, {"eb_rel", "1"},
          {erts, "5.6.3"},
          [{kernel, "2.12.3"},
           {stdlib, "1.15.3"},
           {sasl, "2.1.5.3"},
           {erlybank, "1.0"}]
}.

Текст сохранен в  файле eb_rel-1.erl. "eb_rel" - имя релиза, "1" - номер версии. Кортеж {erts, “5.6.3″} задает версию ERTS, для которой предназначается релиз.  Это можно узнать, запустив erlang-оболочку и обратив внимание на номер версии ,котороая установлена в данный момент. За даннымы кортежами следует список других, определеющих список приложений-зависимостей для данного релиза. Ро принятому соглашению, они перечисляются в порядке зависимости, но systools достаточно разумен, чтобы выяснить это самостоятельно при создании загрузочного скрипта. 

Версии зависимостей можно выяснить, выполнив команду application:loaded_applications/0.

Вы можете заметить, что в качестве неявной зависимости была добавлена библиотека SASL, системные библиотеки поддержки архитектуры (System Architecture Support Libraries). Sasl-приложение необходимо для модуля управления релизами, требуемого при установке релизов в системе. 


*Создание загрузочного скрипта*

Назначение файла спецификаци релиза - создание загрузочного скрипта, который мы будем использовать для быстрой и простой загрузки всего релиза. Чтобы создать этот скрипт, выполните следующую команду: 

Chip ~/.../6_release_management: erl -pa ./ebin
Erlang (BEAM) emulator version 5.6.3 [source] [async-threads:0] [kernel-poll:false]                                     

Eshell V5.6.3  (abort with ^G)
1> systools:make_script("eb_rel-1", [local]).
ok

Важно, что erlang-оболочку необходимо зхапустить из командной строки с явным указанием каталога ebin с помощью ключа "-pa". 
Это делается для того, чтобы systools мола найти файл erlybank.app. 

Запустив оболочку, требуется вызов функции systools:make_script/2 для собственного создания скрипта. Данная функция принимает два аргумента: первым является имя файла спецификации релиза без расширения, причем предполагается, что он находится в текущем каталоге, вторым - список опций. Указанная опция - "local" - указывает полный путь к приложениям-зависимостям, вместо использования переменных окружения, таких как $ROOT. Это удобно для тестирования в окружении разработчика, когда вы готовы собрать пакет, пропустите данные опции.

Если результат вызванной функции - атом "ok", то в текущем рабочем каталоге будет находиться файл eb_rel-1.boot. Данный файл будет использован для запуска ERTS. 


*Запуск системы с указанием файла загрузки*

Помните, как было просто запускать приложение Erlybank с помощью application:start/1? А сейчас это будет еще проще с помощью команды 

erl -boot eb_rel-1

Erlang обнаружит указанный загрузочный файл, прочитает его содержимое и будет выполнять его для запуска системы. Вы можете проверить работу Erlybank, создавая аккаунты, осуществляя депозиты и т.д. 

Для останова системы используйте обычную команду оболочки q(). Все процессы будут корректно остановлены. 


*Создание пакета релиза*

Последний шаг - создание одного пакета, который можно переносить с между разными системами для облегчения установки. теперь это можно выполнить одним действием, так как мы скорректировали структуру каталогов получили откомпилированный загрузочный скрипт:

> systools:make_tar("eb_rel-1").
ok

Теперь в текущем каталоге должен появиться файл eb_rel-1.tar.gz. Это все, что требовалось! 


*Установка пакета*

Для установки пакета релиза необходимо, предже всего, скопировать сжатый архив, созданный ранее, в каталог $ROOT/releases. Значение $ROOT можно выяснить в оболочке, выполнив ode:root_dir(). Далее, запустите оболочку и убедитесь, что приложение sasl запущено и мы можем использовать модуль управления релизом.  также убедитесь, что оболочка запущена из-под пользователя с достаточными привилегиями для записи в каталог $ROOT. Это может потребовать запуска оболочки из-под sudo: 

3> release_handler:unpack_release("eb_rel-1").
{ok,"1"} 

Название функции unpack_release говорит само за себя: она распаковывает файл пакета, копирует библиотеки в каталог, путь к которому можно получить при помощи code:lib_dir(), и создает надлежащую структуру каталогов релиза. Более нужды в какой-либо установке релиза нет, это уже выполнено. 

Теперь перезапустите облочку, запустите sasl,  и теперь вы можете запустить Erlybank с помощью application:start(erlybank) везде, пакет готов к использованию! 

Альтернативный способ запуска приложения одной командой: 

erl -boot $ROOT/releases/1/start

$ROOT должен быть заменен на путьс к корневому каталогу установленного Erlang. 

Финальные заметки. 

В данной статье я ознакомил вас с созданием простого релиза, описывая создание загрузочного скрипта, создание пакета релиза и его установку. Настоящая же мощь релизов, впрочем, проявляется в горячей замене кода, которая будет описана в следующей, заключительной части этой серии. 

